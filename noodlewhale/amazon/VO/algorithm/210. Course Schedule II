#topological sort, for indegree = 0 ,push to queue ,pop queue and push to res, if len(res) == numCourses, then return res else []
#time:O(V+E)
#space:O(E+V)
from collections import defaultdict
from collections import deque
class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        neighbors = defaultdict(list)
        for i in prerequisites:
            neighbors[i[1]].append(i[0])
        indegree = [0]*numCourses
        for i in range(numCourses):
            if i not in neighbors:
                neighbors[i] = []
            for j in neighbors[i]:
                indegree[j] += 1
        queue = deque()
        for i,j in enumerate(indegree):
            if j == 0:
                queue.append(i)
        res = []
        while queue:
            curr = queue.popleft()
            res.append(curr)
            for i in neighbors[curr]:
                indegree[i] -= 1
                if indegree[i] == 0:
                    queue.append(i)
        return res if len(res) == numCourses else []
